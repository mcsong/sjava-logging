<?xml version="1.0" encoding="utf-8"?>
<project name="sjava-logging" default="main" >
    <property name="project.name" value="sjava-logging"/>
    <property name="project.version" value="1.3"/>
    <property name="user.name" value="mcsong@gmail.com" />

	<!-- source -->
	<property name="src.dir" value="src" />
	<property name="src.main.dir" value="src/main"/>
	<property name="src.test.dir" value="src/test"/>
    
	<!-- build -->
	<property name="build.dir" value="build"/>
	<property name="build.main.classes" value="${build.dir}/classes/main"/>
   	<property name="build.test.classes" value="${build.dir}/classes/test"/>

   	<!-- dist -->
   	<property name="dist.dir" value="dist" /> 
	<property name="lib.dir" value="lib"/>
	<property name="lib-ext.dir" value="lib-ext" />
	<property name="doc.dir" value="doc"/>
	
	<!-- test -->
	<property name="test.dir" value="test" />
	<property name="test.result.dir" value="${test.dir}/file" />
	<property name="test.report.dir" value="${test.dir}/report" />
	<property name="test.result.file" value="result" />	

	<tstamp>
		<format property="time" pattern="yyyyMMdd" />
	</tstamp>

	<!-- setting class path -->
    <path id="class.path">
        <pathelement location="${build.main.classes}"/>
    	<pathelement location="${build.test.classes}"/>
    	<pathelement location="${dist.dir}"/>
    	<pathelement location="${lib.dir}"/>
    	<pathelement location="${lib.dir}/sjava-config-1.3.jar"/>
        <pathelement location="${lib-ext.dir}/junit.jar"/>
    	<pathelement location="${lib-ext.dir}/commons-net-1.4.1.jar"/>
    	<pathelement location="${lib-ext.dir}/proguard.jar"/>
    </path>	
	
    <!-- initialize -->
    <target name="init">
    	<echo>init target started</echo>
        <mkdir dir="${doc.dir}"/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.main.classes}"/>
        <mkdir dir="${build.test.classes}"/>
        <mkdir dir="${test.dir}"/>
        <mkdir dir="${test.result.dir}"/>
        <mkdir dir="${test.report.dir}"/>
        <mkdir dir="${dist.dir}"/>
    	<echo>init target completed</echo>
    </target>	

	<!-- clean old version -->
    <target name="clean">
    	<echo>clean target started</echo>    	
		<delete dir="${doc.dir}" />
        <delete dir="${build.dir}"/>
        <delete dir="${build.main.classes}"/>
        <delete dir="${build.test.classes}"/>
        <delete dir="${test.dir}"/>
        <delete dir="${test.result.dir}"/>
        <delete dir="${test.report.dir}"/>
        <delete dir="${dist.dir}"/>
    	<echo>clean target completed</echo>
    </target>	
	
	<!-- main target -->
    <target name="main" depends="compile">
        <echo>main target completed</echo>    
    </target>
	
   	<!-- compile source -->
	<target name="compile" depends="clean, init" description="compile this project">
		<echo>compile target started</echo>
		<javac srcdir="${src.main.dir}" destdir="${build.main.classes}">
			<classpath refid="class.path" />
		</javac>
		<javac srcdir="${src.test.dir}" destdir="${build.test.classes}">
			<classpath refid="class.path" />
		</javac>
         
		<echo>compile target completed</echo>
	</target>	
	
	<!-- distribute compiled binary to dist folder -->
	<target name="dist" depends="compile" description="distribute library">
		<echo>dist target started</echo>
		<jar destfile="${dist.dir}/${project.name}-${project.version}.jar">
    		<fileset dir="${build.main.classes}"></fileset>
            
            <manifest id="MANIFEST.MF">
                 <attribute name="Built-By" value="${user.name}"/>
                 <!--attribute name="Class-Path" value="${class-path}" /-->    
         	</manifest>
        </jar>
		
		<copy todir="${dist.dir}">
			<fileset dir="${lib.dir}">
				<exclude name="junit*.jar" />
			</fileset>
		</copy>
		
		<!-- compress binary -->
		<zip destfile="${dist.dir}/${project.name}-${project.version}.zip" >
			<fileset dir="${dist.dir}" includes="**" />
		</zip>
		<echo>dist target completed</echo>
    </target>	

	<!-- obfuscate task definition -->
	<taskdef name="proguard" classname="proguard.ant.ProGuardTask" classpath="${lib-ext.dir}/proguard.jar" />
	
	<!-- obfuscate with jar file -->
	<target name="dist-with-obfuscate" depends="compile" description="jar with obfuscation" >
		<echo>dist-with-obfuscate target started</echo>
		<jar destfile="${dist.dir}/${project.name}-${project.version}-dummy.jar">
			<fileset dir="${build.main.classes}"></fileset>    
			<manifest id="MANIFEST.MF">
				<attribute name="Built-By" value="${user.name}"/>
				<!-- attribute name="Class-Path" value="${class-path}" /-->    
			</manifest>
		</jar>
		
		<proguard >
			-libraryjars "${java.jre.home}\lib\rt.jar"
			-injars "${dist.dir}/${project.name}-${project.version}-dummy.jar"
			-outjars "${dist.dir}/${project.name}-${project.version}.jar"
			-keep class net.sjava.logging.Logger { public *; } 
			-verbose
		</proguard>
		
		<copy todir="${dist.dir}">
			<fileset dir="${lib.dir}" />
			<!--
			<exclude name="junit*.jar" />
			</fileset>
			-->
		</copy>
		
		<!-- compress binary -->
		<zip destfile="${dist.dir}/${project.name}-${project.version}.zip" >
			<fileset dir="${dist.dir}">
				<exclude name="sjava-*-dummy.jar" />
			</fileset>
		</zip>
		<echo>dist-with-obfuscate target completed</echo>
	</target>		
	
	
	<!-- create library document -->
	<target name="document" depends="dist-with-obfuscate">
	<!--target name="document" depends="dist"-->	
		<echo>document target started</echo>
		
		<javadoc 
			sourcepath="${src.main.dir}"
			packagenames="net.sjava.*" 
			destdir="${doc.dir}" 
			author="true"
			public="true"
			version="true"
			windowtitle="Sjava Logging API Documentation"
			doctitle="Sjava Logging API Documentation">						
		</javadoc>
		<echo>$document target completed</echo>
	</target>	

	<!-- execute this project -->
	<target name="execute" depends="compile" description="run main program">
    	 <echo>execute target started</echo>
        <java jar="${dist.dir}/${project.name}-${project.version}.jar" fork="true" ><!--failon-error="true"-->
            <classpath refid="class.path"></classpath>
        </java>    
        <echo>execute target completed</echo>
    </target>

	
	<!-- test using junit -->
	<target name="junit.test" depends="document" description="test with junit" >    	
		<echo>junit.test target started</echo>
		<junit printsummary="true" fork="true" haltonfailure="on" showoutput="true">
	    	<formatter type="xml"/>
	       	<classpath refid="class.path" />
			<test name="net.sjava.logging.junit.LoggerTestSuite" todir="${test.result.dir}" />
		</junit>
		<echo>junit.test target completed</echo>
	</target>
	    
	<!-- report junit testing result -->
	<target name="junit.report" depends="junit.test" description="report test result with junit" >
		<echo>junit.report target started</echo>
		<junitreport todir="${test.result.dir}">
			<fileset dir="${test.result.dir}">
				<include name="*.xml"/>
			</fileset>
			<report format="frames" todir="${test.report.dir}"/>
	    </junitreport>
	    <echo>completed junit.report target</echo>
	</target>	
	
	<!-- distribute project's binary, document and testing result -->
	<target name="dist.binary" description="dist web site" >
		<echo>distribute server not exist</echo>
	</target>
	
    	
</project> 